continue
LocationCategorization.where(location_id: location.id).first.location
LocationCategorization.where(location_id: location_id).first.location
LocationCategorization.first.location
LocationCategorization.where(location_id: location.id).includes(:location).each { |cat| puts !(cat.location) }
LocationCategorization.where(location_id: location.id).includes(:location).each { |cat| puts !(category.location) }
LocationCategorization.where(location_id: location.id).includes(:loication).each { |cat| puts !(category.location) }
LocationCategorization.where(location_id: location.id).includes(:loication).each do { |cat| puts(!(cat.location)) }
LocationCategorization.where(location_id: location.id).includes(:loication).each do { |cat| puts !(cat.location) }
LocationCategorization.where(location_id: location.id).includes(:loication).each do { |cat| puts !(category.location) }
LocationCategorization.where(location_id: location.id)
continue
LocationCategorization.destroy_all
LocationCategorization.count
next
LocationCategorization.first
location.id
continue
LocationCategorization.count
location.id
continue
LocationCategorization.destroy_all
Location.find(13)
LocationCategorization.first.location_id
LocationCategorization.count
location.id
continue
next
LocationCategorization.destroy_all
continue
JSON.parse(Oj.dump new_category.attributes)['created_at']
JSON.parse(Oj.dump new_category.attributes).keys
JSON.parse(Oj.dump new_category.attributes).class
Oj.dump new_category.attributes
public_attrs(new_category)
public_attrs
oublic_attrs
new_category.id
next
continue
LocationCategorization.destroy_all
next
public_attrs(new_category)
public_attrs
    end
      return Oj.dump(attrs)
      attrs = record.attributes.merge('record_class' => record.class.to_s.underscore.downcase)
    def public_attrs(record)
    end
      return Oj.dump(attrs)
      attrs = record.attributes.merge('record_class' => record.class.to_s.underscore.downcase)
    def public_attrs(record)
next
new_category.valid?
next
continue
LocationCategorization.destroy_all
LocationFollowing.destroy_all
next
continue
Oj.dump Location.all.to_a.map { |location| location.attributes }
Oj.dump Location.all.to_a
continue
      end
        )
          'record_class' => "location"
        location.attributes.merge(
      Location.all.includes(:categories).map do |location|
 Oj.dump(
continue
notepad.persisted?
notepad
continue
ROOT_URL
continue
RootUrl
continue
ENV["PORT"]
continue
params
continue
next
continue
next
continue
c
next
begin
next
user.class
user.clas
next
continue
BCrypt::Password.create("").is_password?()
BCrypt::Password.create("").is_password?("1")
BCrypt::Password.create("").is_password?("")
BCrypt::Password.create("foo").is_password?("foo")
"foo".is_password?(BCrypt::Password.create("foo"))
"foo".is_password?(BCrypt::Password.create("foo")
BCrypt::Password.create("foo").is_password?("$2a$10$6BzJRRm6OZOuGimTF1E8i.b6C0M9Cd6FBn310MU3uYJVhjVE9vIYK")
BCrypt::Password.create("foo")
BCrypt::Password
Oj
Oj'
next
user
continue
